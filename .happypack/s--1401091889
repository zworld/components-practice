'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _from = require('babel-runtime/core-js/array/from');

var _from2 = _interopRequireDefault(_from);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

exports.default = {
    data: function data() {
        return {
            msg: 'hello vue',
            params: {
                count: 2,
                preEllipsis: true,
                afterEllipsis: true,
                first: [],
                center: [],
                last: [],
                limit: 10,
                current: 96
            }
        };
    },

    methods: {

        initData: function initData() {

            var vm = this;
            var data = vm.params;
            var allPage = (0, _from2.default)(new Array(data.count).keys()).map(function (index) {
                return index + 1;
            });

            if (data.count <= 7) {

                data.first = allPage;
                data.preEllipsis = false;
                data.center = [];
                data.afterEllipsis = false;
                data.last = [];
            } else {

                if (data.current <= 4) {

                    data.current == 4 ? data.first = allPage.slice(0, 5) : data.first = allPage.slice(0, 4);
                    data.preEllipsis = false;
                    data.center = [];
                    data.afterEllipsis = true;
                    data.last = allPage.slice(data.count - 2);
                } else {

                    data.first = allPage.slice(0, 2);
                    data.preEllipsis = true;

                    if (data.current >= data.count - 3) {
                        data.center = [];
                        data.afterEllipsis = false;
                        data.current == data.count - 3 ? data.last = allPage.slice(-5) : data.last = allPage.slice(-4);
                    } else {
                        data.center = [data.current - 1, data.current, data.current + 1];
                        data.afterEllipsis = true;
                        data.last = allPage.slice(-2);
                    }
                }
            }
        },

        toPre: function toPre() {

            var vm = this;
            if (vm.params.current == 1) return;
            vm.params.current--;
            vm.initData();
        },

        jump: function jump(item) {

            var vm = this;
            if (item == vm.params.current) return;
            vm.params.current = item;
            vm.initData();
        },


        toNext: function toNext() {

            var vm = this;
            if (vm.params.current == vm.params.count) return;
            vm.params.current++;
            vm.initData();
        }

    },
    created: function created() {
        this.initData();
    },
    mounted: function mounted() {
        //            this.initData()
    }
};